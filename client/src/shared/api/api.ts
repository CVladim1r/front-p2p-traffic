/* tslint:disable */
/* eslint-disable */
/**
 * P2P Backend
 * Backend service for metrics tracking.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface APIExceptionModel
 */
export interface APIExceptionModel {
    /**
     * 
     * @type {string}
     * @memberof APIExceptionModel
     */
    'error': string;
    /**
     * 
     * @type {number}
     * @memberof APIExceptionModel
     */
    'status_code': number;
}
/**
 * 
 * @export
 * @interface AuthIn
 */
export interface AuthIn {
    /**
     * 
     * @type {InitDataIn}
     * @memberof AuthIn
     */
    'init_data_raw'?: InitDataIn | null;
    /**
     * 
     * @type {InitTonIn}
     * @memberof AuthIn
     */
    'init_ton'?: InitTonIn | null;
    /**
     * 
     * @type {string}
     * @memberof AuthIn
     */
    'auth_type'?: string;
}
/**
 * 
 * @export
 * @interface AuthOut
 */
export interface AuthOut {
    /**
     * 
     * @type {string}
     * @memberof AuthOut
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface AuthUserIn
 */
export interface AuthUserIn {
    /**
     * 
     * @type {boolean}
     * @memberof AuthUserIn
     */
    'allows_write_to_pm'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AuthUserIn
     */
    'first_name': string;
    /**
     * 
     * @type {number}
     * @memberof AuthUserIn
     */
    'id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof AuthUserIn
     */
    'is_premium'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AuthUserIn
     */
    'language_code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthUserIn
     */
    'last_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthUserIn
     */
    'username'?: string | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface InitDataIn
 */
export interface InitDataIn {
    /**
     * 
     * @type {string}
     * @memberof InitDataIn
     */
    'auth_date': string;
    /**
     * 
     * @type {string}
     * @memberof InitDataIn
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof InitDataIn
     */
    'query_id'?: string | null;
    /**
     * 
     * @type {AuthUserIn}
     * @memberof InitDataIn
     */
    'user': AuthUserIn;
}
/**
 * 
 * @export
 * @interface InitTonIn
 */
export interface InitTonIn {
    /**
     * 
     * @type {string}
     * @memberof InitTonIn
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof InitTonIn
     */
    'signature'?: string | null;
}
/**
 * 
 * @export
 * @interface StartUserIn
 */
export interface StartUserIn {
    /**
     * 
     * @type {number}
     * @memberof StartUserIn
     */
    'tg_id': number;
    /**
     * 
     * @type {string}
     * @memberof StartUserIn
     */
    'username': string;
    /**
     * 
     * @type {boolean}
     * @memberof StartUserIn
     */
    'is_premium': boolean;
}
/**
 * 
 * @export
 * @interface StartUserOut
 */
export interface StartUserOut {
    /**
     * 
     * @type {string}
     * @memberof StartUserOut
     */
    'uuid': string;
    /**
     * 
     * @type {number}
     * @memberof StartUserOut
     */
    'tg_id': number;
    /**
     * 
     * @type {string}
     * @memberof StartUserOut
     */
    'username': string;
    /**
     * 
     * @type {boolean}
     * @memberof StartUserOut
     */
    'is_premium'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof StartUserOut
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface UserMainPageOut
 */
export interface UserMainPageOut {
    /**
     * 
     * @type {string}
     * @memberof UserMainPageOut
     */
    'uuid': string;
    /**
     * 
     * @type {number}
     * @memberof UserMainPageOut
     */
    'tg_id': number;
    /**
     * 
     * @type {string}
     * @memberof UserMainPageOut
     */
    'username': string | null;
    /**
     * 
     * @type {number}
     * @memberof UserMainPageOut
     */
    'rating': number;
    /**
     * 
     * @type {number}
     * @memberof UserMainPageOut
     */
    'balance': number;
    /**
     * 
     * @type {number}
     * @memberof UserMainPageOut
     */
    'total_sales': number;
    /**
     * 
     * @type {string}
     * @memberof UserMainPageOut
     */
    'referral_id': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserMainPageOut
     */
    'is_vip': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserMainPageOut
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof UserMainPageOut
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Post Auth
         * @param {AuthIn} authIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthApiV1P2pAuthPost: async (authIn: AuthIn, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authIn' is not null or undefined
            assertParamExists('postAuthApiV1P2pAuthPost', 'authIn', authIn)
            const localVarPath = `/api/v1/p2p/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Post Auth
         * @param {AuthIn} authIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthApiV1P2pAuthPost(authIn: AuthIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthApiV1P2pAuthPost(authIn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.postAuthApiV1P2pAuthPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Post Auth
         * @param {AuthIn} authIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthApiV1P2pAuthPost(authIn: AuthIn, options?: RawAxiosRequestConfig): AxiosPromise<AuthOut> {
            return localVarFp.postAuthApiV1P2pAuthPost(authIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Post Auth
     * @param {AuthIn} authIn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public postAuthApiV1P2pAuthPost(authIn: AuthIn, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).postAuthApiV1P2pAuthPost(authIn, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check API health
         * @summary Root Endpoint
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('rootGet', 'authorization', authorization)
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Check API health
         * @summary Root Endpoint
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Check API health
         * @summary Root Endpoint
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(authorization: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rootGet(authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Check API health
     * @summary Root Endpoint
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(authorization: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(authorization, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Metric
         * @param {string} eventType 
         * @param {string} authorization 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMetricApiV1P2pMetricsCreateMetricPost: async (eventType: string, authorization: string, userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventType' is not null or undefined
            assertParamExists('createMetricApiV1P2pMetricsCreateMetricPost', 'eventType', eventType)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createMetricApiV1P2pMetricsCreateMetricPost', 'authorization', authorization)
            const localVarPath = `/api/v1/p2p/metrics/create_metric`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Metric
         * @param {string} eventType 
         * @param {string} authorization 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMetricApiV1P2pMetricsCreateMetricPost(eventType: string, authorization: string, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMetricApiV1P2pMetricsCreateMetricPost(eventType, authorization, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.createMetricApiV1P2pMetricsCreateMetricPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Metric
         * @param {string} eventType 
         * @param {string} authorization 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMetricApiV1P2pMetricsCreateMetricPost(eventType: string, authorization: string, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.createMetricApiV1P2pMetricsCreateMetricPost(eventType, authorization, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
    /**
     * 
     * @summary Create Metric
     * @param {string} eventType 
     * @param {string} authorization 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public createMetricApiV1P2pMetricsCreateMetricPost(eventType: string, authorization: string, userId?: string, options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).createMetricApiV1P2pMetricsCreateMetricPost(eventType, authorization, userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User
         * @param {string} authorization 
         * @param {StartUserIn} startUserIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserApiV1P2pUserCreateUserPost: async (authorization: string, startUserIn: StartUserIn, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('createUserApiV1P2pUserCreateUserPost', 'authorization', authorization)
            // verify required parameter 'startUserIn' is not null or undefined
            assertParamExists('createUserApiV1P2pUserCreateUserPost', 'startUserIn', startUserIn)
            const localVarPath = `/api/v1/p2p/user/create_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startUserIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Main Data
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMainDataApiV1P2pUserMainDataGet: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUserMainDataApiV1P2pUserMainDataGet', 'authorization', authorization)
            const localVarPath = `/api/v1/p2p/user/main_data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {string} authorization 
         * @param {StartUserIn} startUserIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserApiV1P2pUserCreateUserPost(authorization: string, startUserIn: StartUserIn, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartUserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserApiV1P2pUserCreateUserPost(authorization, startUserIn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.createUserApiV1P2pUserCreateUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User Main Data
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserMainDataApiV1P2pUserMainDataGet(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMainPageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserMainDataApiV1P2pUserMainDataGet(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUserMainDataApiV1P2pUserMainDataGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {string} authorization 
         * @param {StartUserIn} startUserIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserApiV1P2pUserCreateUserPost(authorization: string, startUserIn: StartUserIn, options?: RawAxiosRequestConfig): AxiosPromise<StartUserOut> {
            return localVarFp.createUserApiV1P2pUserCreateUserPost(authorization, startUserIn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Main Data
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMainDataApiV1P2pUserMainDataGet(authorization: string, options?: RawAxiosRequestConfig): AxiosPromise<UserMainPageOut> {
            return localVarFp.getUserMainDataApiV1P2pUserMainDataGet(authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Create User
     * @param {string} authorization 
     * @param {StartUserIn} startUserIn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUserApiV1P2pUserCreateUserPost(authorization: string, startUserIn: StartUserIn, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUserApiV1P2pUserCreateUserPost(authorization, startUserIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Main Data
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserMainDataApiV1P2pUserMainDataGet(authorization: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserMainDataApiV1P2pUserMainDataGet(authorization, options).then((request) => request(this.axios, this.basePath));
    }
}



